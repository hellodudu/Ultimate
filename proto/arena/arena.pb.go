// Code generated by protoc-gen-go. DO NOT EDIT.
// source: arena/arena.proto

package ultimate_service_arena

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type Message struct {
	Say                  string   `protobuf:"bytes,1,opt,name=say,proto3" json:"say,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Message) Reset()         { *m = Message{} }
func (m *Message) String() string { return proto.CompactTextString(m) }
func (*Message) ProtoMessage()    {}
func (*Message) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{0}
}

func (m *Message) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Message.Unmarshal(m, b)
}
func (m *Message) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Message.Marshal(b, m, deterministic)
}
func (m *Message) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Message.Merge(m, src)
}
func (m *Message) XXX_Size() int {
	return xxx_messageInfo_Message.Size(m)
}
func (m *Message) XXX_DiscardUnknown() {
	xxx_messageInfo_Message.DiscardUnknown(m)
}

var xxx_messageInfo_Message proto.InternalMessageInfo

func (m *Message) GetSay() string {
	if m != nil {
		return m.Say
	}
	return ""
}

type Request struct {
	Name                 string   `protobuf:"bytes,1,opt,name=name,proto3" json:"name,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{1}
}

func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (m *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(m, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{2}
}

func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (m *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(m, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

type StreamingRequest struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingRequest) Reset()         { *m = StreamingRequest{} }
func (m *StreamingRequest) String() string { return proto.CompactTextString(m) }
func (*StreamingRequest) ProtoMessage()    {}
func (*StreamingRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{3}
}

func (m *StreamingRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingRequest.Unmarshal(m, b)
}
func (m *StreamingRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingRequest.Marshal(b, m, deterministic)
}
func (m *StreamingRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingRequest.Merge(m, src)
}
func (m *StreamingRequest) XXX_Size() int {
	return xxx_messageInfo_StreamingRequest.Size(m)
}
func (m *StreamingRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingRequest.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingRequest proto.InternalMessageInfo

func (m *StreamingRequest) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type StreamingResponse struct {
	Count                int64    `protobuf:"varint,1,opt,name=count,proto3" json:"count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamingResponse) Reset()         { *m = StreamingResponse{} }
func (m *StreamingResponse) String() string { return proto.CompactTextString(m) }
func (*StreamingResponse) ProtoMessage()    {}
func (*StreamingResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{4}
}

func (m *StreamingResponse) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamingResponse.Unmarshal(m, b)
}
func (m *StreamingResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamingResponse.Marshal(b, m, deterministic)
}
func (m *StreamingResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamingResponse.Merge(m, src)
}
func (m *StreamingResponse) XXX_Size() int {
	return xxx_messageInfo_StreamingResponse.Size(m)
}
func (m *StreamingResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamingResponse.DiscardUnknown(m)
}

var xxx_messageInfo_StreamingResponse proto.InternalMessageInfo

func (m *StreamingResponse) GetCount() int64 {
	if m != nil {
		return m.Count
	}
	return 0
}

type Ping struct {
	Stroke               int64    `protobuf:"varint,1,opt,name=stroke,proto3" json:"stroke,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Ping) Reset()         { *m = Ping{} }
func (m *Ping) String() string { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()    {}
func (*Ping) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{5}
}

func (m *Ping) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Ping.Unmarshal(m, b)
}
func (m *Ping) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Ping.Marshal(b, m, deterministic)
}
func (m *Ping) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Ping.Merge(m, src)
}
func (m *Ping) XXX_Size() int {
	return xxx_messageInfo_Ping.Size(m)
}
func (m *Ping) XXX_DiscardUnknown() {
	xxx_messageInfo_Ping.DiscardUnknown(m)
}

var xxx_messageInfo_Ping proto.InternalMessageInfo

func (m *Ping) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

type Pong struct {
	Stroke               int64    `protobuf:"varint,1,opt,name=stroke,proto3" json:"stroke,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Pong) Reset()         { *m = Pong{} }
func (m *Pong) String() string { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()    {}
func (*Pong) Descriptor() ([]byte, []int) {
	return fileDescriptor_8465af7ffb73df40, []int{6}
}

func (m *Pong) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Pong.Unmarshal(m, b)
}
func (m *Pong) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Pong.Marshal(b, m, deterministic)
}
func (m *Pong) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Pong.Merge(m, src)
}
func (m *Pong) XXX_Size() int {
	return xxx_messageInfo_Pong.Size(m)
}
func (m *Pong) XXX_DiscardUnknown() {
	xxx_messageInfo_Pong.DiscardUnknown(m)
}

var xxx_messageInfo_Pong proto.InternalMessageInfo

func (m *Pong) GetStroke() int64 {
	if m != nil {
		return m.Stroke
	}
	return 0
}

func init() {
	proto.RegisterType((*Message)(nil), "ultimate.service.arena.Message")
	proto.RegisterType((*Request)(nil), "ultimate.service.arena.Request")
	proto.RegisterType((*Response)(nil), "ultimate.service.arena.Response")
	proto.RegisterType((*StreamingRequest)(nil), "ultimate.service.arena.StreamingRequest")
	proto.RegisterType((*StreamingResponse)(nil), "ultimate.service.arena.StreamingResponse")
	proto.RegisterType((*Ping)(nil), "ultimate.service.arena.Ping")
	proto.RegisterType((*Pong)(nil), "ultimate.service.arena.Pong")
}

func init() { proto.RegisterFile("arena/arena.proto", fileDescriptor_8465af7ffb73df40) }

var fileDescriptor_8465af7ffb73df40 = []byte{
	// 275 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x8c, 0x92, 0xc1, 0x4a, 0xc3, 0x40,
	0x10, 0x86, 0x1b, 0x1b, 0xd3, 0x3a, 0x78, 0x68, 0x07, 0x29, 0x12, 0xab, 0x96, 0x3d, 0xa5, 0x97,
	0x58, 0xf4, 0x09, 0xc4, 0xa3, 0x0a, 0x92, 0x3e, 0xc1, 0x5a, 0x86, 0x25, 0x98, 0xec, 0xd6, 0xcc,
	0x46, 0xf0, 0x1d, 0x7c, 0x68, 0xc9, 0x66, 0x03, 0x22, 0x5d, 0xe8, 0x25, 0xcc, 0xf0, 0x7f, 0x33,
	0x99, 0xff, 0x67, 0x61, 0x2e, 0x1b, 0xd2, 0xf2, 0xce, 0x7d, 0xf3, 0x7d, 0x63, 0xac, 0xc1, 0x45,
	0x5b, 0xd9, 0xb2, 0x96, 0x96, 0x72, 0xa6, 0xe6, 0xab, 0xdc, 0x51, 0xee, 0x54, 0x71, 0x05, 0x93,
	0x57, 0x62, 0x96, 0x8a, 0x70, 0x06, 0x63, 0x96, 0xdf, 0x97, 0xd1, 0x2a, 0xca, 0xce, 0x8a, 0xae,
	0x14, 0xd7, 0x30, 0x29, 0xe8, 0xb3, 0x25, 0xb6, 0x88, 0x10, 0x6b, 0x59, 0x93, 0x57, 0x5d, 0x2d,
	0x96, 0x30, 0x2d, 0x88, 0xf7, 0x46, 0xb3, 0x1b, 0xae, 0x59, 0x0d, 0xc3, 0x35, 0x2b, 0x91, 0xc1,
	0x6c, 0x6b, 0x1b, 0x92, 0x75, 0xa9, 0xd5, 0xb0, 0xe5, 0x02, 0x4e, 0x77, 0xa6, 0xd5, 0xd6, 0x71,
	0xe3, 0xa2, 0x6f, 0xc4, 0x1a, 0xe6, 0x7f, 0x48, 0xbf, 0xf0, 0x30, 0x7a, 0x03, 0xf1, 0x5b, 0xa9,
	0x15, 0x2e, 0x20, 0x61, 0xdb, 0x98, 0x0f, 0xf2, 0xb2, 0xef, 0x9c, 0x6e, 0xc2, 0xfa, 0xfd, 0xcf,
	0x09, 0x9c, 0x3f, 0x76, 0xc6, 0xb7, 0x7d, 0x0a, 0xf8, 0x0c, 0xf1, 0x93, 0xac, 0x2a, 0xbc, 0xcd,
	0x0f, 0x07, 0x94, 0xfb, 0xd3, 0xd3, 0x55, 0x18, 0xe8, 0x2f, 0x16, 0x23, 0x94, 0x90, 0xf4, 0x46,
	0x30, 0x0b, 0xd1, 0xff, 0x23, 0x49, 0xd7, 0x47, 0x90, 0xc3, 0x0f, 0x36, 0x11, 0xbe, 0xc0, 0xb4,
	0x0b, 0xc0, 0x99, 0x5c, 0x86, 0x46, 0x3b, 0x22, 0x0d, 0xab, 0x46, 0x2b, 0x31, 0xca, 0xa2, 0x4d,
	0xf4, 0x9e, 0xb8, 0xc7, 0xf1, 0xf0, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xf5, 0xd8, 0x95, 0xfa, 0x31,
	0x02, 0x00, 0x00,
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for ArenaService service

type ArenaServiceClient interface {
	Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error)
	Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (ArenaService_StreamClient, error)
	PingPong(ctx context.Context, opts ...client.CallOption) (ArenaService_PingPongClient, error)
}

type arenaServiceClient struct {
	c           client.Client
	serviceName string
}

func NewArenaServiceClient(serviceName string, c client.Client) ArenaServiceClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "ultimate.service.arena"
	}
	return &arenaServiceClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *arenaServiceClient) Call(ctx context.Context, in *Request, opts ...client.CallOption) (*Response, error) {
	req := c.c.NewRequest(c.serviceName, "ArenaService.Call", in)
	out := new(Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaServiceClient) Stream(ctx context.Context, in *StreamingRequest, opts ...client.CallOption) (ArenaService_StreamClient, error) {
	req := c.c.NewRequest(c.serviceName, "ArenaService.Stream", &StreamingRequest{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	if err := stream.Send(in); err != nil {
		return nil, err
	}
	return &arenaServiceStreamClient{stream}, nil
}

type ArenaService_StreamClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Recv() (*StreamingResponse, error)
}

type arenaServiceStreamClient struct {
	stream client.Streamer
}

func (x *arenaServiceStreamClient) Close() error {
	return x.stream.Close()
}

func (x *arenaServiceStreamClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *arenaServiceStreamClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *arenaServiceStreamClient) Recv() (*StreamingResponse, error) {
	m := new(StreamingResponse)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

func (c *arenaServiceClient) PingPong(ctx context.Context, opts ...client.CallOption) (ArenaService_PingPongClient, error) {
	req := c.c.NewRequest(c.serviceName, "ArenaService.PingPong", &Ping{})
	stream, err := c.c.Stream(ctx, req, opts...)
	if err != nil {
		return nil, err
	}
	return &arenaServicePingPongClient{stream}, nil
}

type ArenaService_PingPongClient interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Ping) error
	Recv() (*Pong, error)
}

type arenaServicePingPongClient struct {
	stream client.Streamer
}

func (x *arenaServicePingPongClient) Close() error {
	return x.stream.Close()
}

func (x *arenaServicePingPongClient) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *arenaServicePingPongClient) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *arenaServicePingPongClient) Send(m *Ping) error {
	return x.stream.Send(m)
}

func (x *arenaServicePingPongClient) Recv() (*Pong, error) {
	m := new(Pong)
	err := x.stream.Recv(m)
	if err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for ArenaService service

type ArenaServiceHandler interface {
	Call(context.Context, *Request, *Response) error
	Stream(context.Context, *StreamingRequest, ArenaService_StreamStream) error
	PingPong(context.Context, ArenaService_PingPongStream) error
}

func RegisterArenaServiceHandler(s server.Server, hdlr ArenaServiceHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&ArenaService{hdlr}, opts...))
}

type ArenaService struct {
	ArenaServiceHandler
}

func (h *ArenaService) Call(ctx context.Context, in *Request, out *Response) error {
	return h.ArenaServiceHandler.Call(ctx, in, out)
}

func (h *ArenaService) Stream(ctx context.Context, stream server.Streamer) error {
	m := new(StreamingRequest)
	if err := stream.Recv(m); err != nil {
		return err
	}
	return h.ArenaServiceHandler.Stream(ctx, m, &arenaServiceStreamStream{stream})
}

type ArenaService_StreamStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*StreamingResponse) error
}

type arenaServiceStreamStream struct {
	stream server.Streamer
}

func (x *arenaServiceStreamStream) Close() error {
	return x.stream.Close()
}

func (x *arenaServiceStreamStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *arenaServiceStreamStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *arenaServiceStreamStream) Send(m *StreamingResponse) error {
	return x.stream.Send(m)
}

func (h *ArenaService) PingPong(ctx context.Context, stream server.Streamer) error {
	return h.ArenaServiceHandler.PingPong(ctx, &arenaServicePingPongStream{stream})
}

type ArenaService_PingPongStream interface {
	SendMsg(interface{}) error
	RecvMsg(interface{}) error
	Close() error
	Send(*Pong) error
	Recv() (*Ping, error)
}

type arenaServicePingPongStream struct {
	stream server.Streamer
}

func (x *arenaServicePingPongStream) Close() error {
	return x.stream.Close()
}

func (x *arenaServicePingPongStream) SendMsg(m interface{}) error {
	return x.stream.Send(m)
}

func (x *arenaServicePingPongStream) RecvMsg(m interface{}) error {
	return x.stream.Recv(m)
}

func (x *arenaServicePingPongStream) Send(m *Pong) error {
	return x.stream.Send(m)
}

func (x *arenaServicePingPongStream) Recv() (*Ping, error) {
	m := new(Ping)
	if err := x.stream.Recv(m); err != nil {
		return nil, err
	}
	return m, nil
}
