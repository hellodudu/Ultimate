// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: arena/arena.proto

package arena

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for ArenaService service

func NewArenaServiceEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for ArenaService service

type ArenaService interface {
	GetSeasonData(ctx context.Context, in *GetSeasonDataRequest, opts ...client.CallOption) (*GetSeasonDataReply, error)
	GetChampion(ctx context.Context, in *GetChampionRequest, opts ...client.CallOption) (*GetChampionReply, error)
	GetRank(ctx context.Context, in *GetRankRequest, opts ...client.CallOption) (*GetRankReply, error)
	GetArenaDataNum(ctx context.Context, in *GetArenaDataNumRequest, opts ...client.CallOption) (*GetArenaDataNumReply, error)
	GetRecordNum(ctx context.Context, in *GetRecordNumRequest, opts ...client.CallOption) (*GetRecordNumReply, error)
	GetMatchingList(ctx context.Context, in *GetMatchingListRequest, opts ...client.CallOption) (*GetMatchingListReply, error)
	GetRecordReqList(ctx context.Context, in *GetRecordReqListRequest, opts ...client.CallOption) (*GetRecordReqListReply, error)
	GetRecordByID(ctx context.Context, in *GetRecordByIDRequest, opts ...client.CallOption) (*GetRecordByIDReply, error)
	GetRankListByPage(ctx context.Context, in *GetRankListByPageRequest, opts ...client.CallOption) (*GetRankListByPageReply, error)
	SaveChampion(ctx context.Context, in *SaveChampionRequest, opts ...client.CallOption) (*SaveChampionReply, error)
	WeekEnd(ctx context.Context, in *WeekEndRequest, opts ...client.CallOption) (*WeekEndReply, error)
}

type arenaService struct {
	c    client.Client
	name string
}

func NewArenaService(name string, c client.Client) ArenaService {
	return &arenaService{
		c:    c,
		name: name,
	}
}

func (c *arenaService) GetSeasonData(ctx context.Context, in *GetSeasonDataRequest, opts ...client.CallOption) (*GetSeasonDataReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetSeasonData", in)
	out := new(GetSeasonDataReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetChampion(ctx context.Context, in *GetChampionRequest, opts ...client.CallOption) (*GetChampionReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetChampion", in)
	out := new(GetChampionReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetRank(ctx context.Context, in *GetRankRequest, opts ...client.CallOption) (*GetRankReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetRank", in)
	out := new(GetRankReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetArenaDataNum(ctx context.Context, in *GetArenaDataNumRequest, opts ...client.CallOption) (*GetArenaDataNumReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetArenaDataNum", in)
	out := new(GetArenaDataNumReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetRecordNum(ctx context.Context, in *GetRecordNumRequest, opts ...client.CallOption) (*GetRecordNumReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetRecordNum", in)
	out := new(GetRecordNumReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetMatchingList(ctx context.Context, in *GetMatchingListRequest, opts ...client.CallOption) (*GetMatchingListReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetMatchingList", in)
	out := new(GetMatchingListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetRecordReqList(ctx context.Context, in *GetRecordReqListRequest, opts ...client.CallOption) (*GetRecordReqListReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetRecordReqList", in)
	out := new(GetRecordReqListReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetRecordByID(ctx context.Context, in *GetRecordByIDRequest, opts ...client.CallOption) (*GetRecordByIDReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetRecordByID", in)
	out := new(GetRecordByIDReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) GetRankListByPage(ctx context.Context, in *GetRankListByPageRequest, opts ...client.CallOption) (*GetRankListByPageReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.GetRankListByPage", in)
	out := new(GetRankListByPageReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) SaveChampion(ctx context.Context, in *SaveChampionRequest, opts ...client.CallOption) (*SaveChampionReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.SaveChampion", in)
	out := new(SaveChampionReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *arenaService) WeekEnd(ctx context.Context, in *WeekEndRequest, opts ...client.CallOption) (*WeekEndReply, error) {
	req := c.c.NewRequest(c.name, "ArenaService.WeekEnd", in)
	out := new(WeekEndReply)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for ArenaService service

type ArenaServiceHandler interface {
	GetSeasonData(context.Context, *GetSeasonDataRequest, *GetSeasonDataReply) error
	GetChampion(context.Context, *GetChampionRequest, *GetChampionReply) error
	GetRank(context.Context, *GetRankRequest, *GetRankReply) error
	GetArenaDataNum(context.Context, *GetArenaDataNumRequest, *GetArenaDataNumReply) error
	GetRecordNum(context.Context, *GetRecordNumRequest, *GetRecordNumReply) error
	GetMatchingList(context.Context, *GetMatchingListRequest, *GetMatchingListReply) error
	GetRecordReqList(context.Context, *GetRecordReqListRequest, *GetRecordReqListReply) error
	GetRecordByID(context.Context, *GetRecordByIDRequest, *GetRecordByIDReply) error
	GetRankListByPage(context.Context, *GetRankListByPageRequest, *GetRankListByPageReply) error
	SaveChampion(context.Context, *SaveChampionRequest, *SaveChampionReply) error
	WeekEnd(context.Context, *WeekEndRequest, *WeekEndReply) error
}

func RegisterArenaServiceHandler(s server.Server, hdlr ArenaServiceHandler, opts ...server.HandlerOption) error {
	type arenaService interface {
		GetSeasonData(ctx context.Context, in *GetSeasonDataRequest, out *GetSeasonDataReply) error
		GetChampion(ctx context.Context, in *GetChampionRequest, out *GetChampionReply) error
		GetRank(ctx context.Context, in *GetRankRequest, out *GetRankReply) error
		GetArenaDataNum(ctx context.Context, in *GetArenaDataNumRequest, out *GetArenaDataNumReply) error
		GetRecordNum(ctx context.Context, in *GetRecordNumRequest, out *GetRecordNumReply) error
		GetMatchingList(ctx context.Context, in *GetMatchingListRequest, out *GetMatchingListReply) error
		GetRecordReqList(ctx context.Context, in *GetRecordReqListRequest, out *GetRecordReqListReply) error
		GetRecordByID(ctx context.Context, in *GetRecordByIDRequest, out *GetRecordByIDReply) error
		GetRankListByPage(ctx context.Context, in *GetRankListByPageRequest, out *GetRankListByPageReply) error
		SaveChampion(ctx context.Context, in *SaveChampionRequest, out *SaveChampionReply) error
		WeekEnd(ctx context.Context, in *WeekEndRequest, out *WeekEndReply) error
	}
	type ArenaService struct {
		arenaService
	}
	h := &arenaServiceHandler{hdlr}
	return s.Handle(s.NewHandler(&ArenaService{h}, opts...))
}

type arenaServiceHandler struct {
	ArenaServiceHandler
}

func (h *arenaServiceHandler) GetSeasonData(ctx context.Context, in *GetSeasonDataRequest, out *GetSeasonDataReply) error {
	return h.ArenaServiceHandler.GetSeasonData(ctx, in, out)
}

func (h *arenaServiceHandler) GetChampion(ctx context.Context, in *GetChampionRequest, out *GetChampionReply) error {
	return h.ArenaServiceHandler.GetChampion(ctx, in, out)
}

func (h *arenaServiceHandler) GetRank(ctx context.Context, in *GetRankRequest, out *GetRankReply) error {
	return h.ArenaServiceHandler.GetRank(ctx, in, out)
}

func (h *arenaServiceHandler) GetArenaDataNum(ctx context.Context, in *GetArenaDataNumRequest, out *GetArenaDataNumReply) error {
	return h.ArenaServiceHandler.GetArenaDataNum(ctx, in, out)
}

func (h *arenaServiceHandler) GetRecordNum(ctx context.Context, in *GetRecordNumRequest, out *GetRecordNumReply) error {
	return h.ArenaServiceHandler.GetRecordNum(ctx, in, out)
}

func (h *arenaServiceHandler) GetMatchingList(ctx context.Context, in *GetMatchingListRequest, out *GetMatchingListReply) error {
	return h.ArenaServiceHandler.GetMatchingList(ctx, in, out)
}

func (h *arenaServiceHandler) GetRecordReqList(ctx context.Context, in *GetRecordReqListRequest, out *GetRecordReqListReply) error {
	return h.ArenaServiceHandler.GetRecordReqList(ctx, in, out)
}

func (h *arenaServiceHandler) GetRecordByID(ctx context.Context, in *GetRecordByIDRequest, out *GetRecordByIDReply) error {
	return h.ArenaServiceHandler.GetRecordByID(ctx, in, out)
}

func (h *arenaServiceHandler) GetRankListByPage(ctx context.Context, in *GetRankListByPageRequest, out *GetRankListByPageReply) error {
	return h.ArenaServiceHandler.GetRankListByPage(ctx, in, out)
}

func (h *arenaServiceHandler) SaveChampion(ctx context.Context, in *SaveChampionRequest, out *SaveChampionReply) error {
	return h.ArenaServiceHandler.SaveChampion(ctx, in, out)
}

func (h *arenaServiceHandler) WeekEnd(ctx context.Context, in *WeekEndRequest, out *WeekEndReply) error {
	return h.ArenaServiceHandler.WeekEnd(ctx, in, out)
}
